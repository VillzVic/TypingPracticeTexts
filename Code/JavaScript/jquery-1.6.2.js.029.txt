            cache = isNode ? jQuery.cache : elem,

            // Only defining an ID for JS objects if its cache already exists allows
            // the code to shortcut on the same path as a DOM node with no cache
            id = isNode ? elem[ jQuery.expando ] : elem[ jQuery.expando ] && jQuery.expando;

        // Avoid doing any more work than we need to when trying to get data on an
        // object that has no data at all
        if ( (!id || (pvt && id && !cache[ id ][ internalKey ])) && getByName && data === undefined ) {
            return;
        }

        if ( !id ) {
            // Only DOM nodes need a new unique ID for each element since their data
            // ends up in the global cache
            if ( isNode ) {
                elem[ jQuery.expando ] = id = ++jQuery.uuid;
            } else {
                id = jQuery.expando;
            }
        }

        if ( !cache[ id ] ) {
            cache[ id ] = {};

            // TODO: This is a hack for 1.5 ONLY. Avoids exposing jQuery
            // metadata on plain JS objects when the object is serialized using
            // JSON.stringify
            if ( !isNode ) {
                cache[ id ].toJSON = jQuery.noop;
            }
        }

        // An object can be passed to jQuery.data instead of a key/value pair; this gets
        // shallow copied over onto the existing cache
        if ( typeof name === "object" || typeof name === "function" ) {
            if ( pvt ) {
                cache[ id ][ internalKey ] = jQuery.extend(cache[ id ][ internalKey ], name);
            } else {
                cache[ id ] = jQuery.extend(cache[ id ], name);
