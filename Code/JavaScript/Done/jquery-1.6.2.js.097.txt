                    if ( !matches[ selector ] ) {
                        matches[ selector ] = POS.test( selector ) ?
                            jQuery( selector, context || this.context ) :
                            selector;
                    }
                }

                while ( cur && cur.ownerDocument && cur !== context ) {
                    for ( selector in matches ) {
                        match = matches[ selector ];

                        if ( match.jquery ? match.index( cur ) > -1 : jQuery( cur ).is( match ) ) {
                            ret.push({ selector: selector, elem: cur, level: level });
                        }
                    }

                    cur = cur.parentNode;
                    level++;
                }
            }

            return ret;
        }

        // String
        var pos = POS.test( selectors ) || typeof selectors !== "string" ?
                jQuery( selectors, context || this.context ) :
                0;

        for ( i = 0, l = this.length; i < l; i++ ) {
            cur = this[i];

            while ( cur ) {
                if ( pos ? pos.index(cur) > -1 : jQuery.find.matchesSelector(cur, selectors) ) {
                    ret.push( cur );
                    break;

                } else {
                    cur = cur.parentNode;
                    if ( !cur || !cur.ownerDocument || cur === context || cur.nodeType === 11 ) {
                        break;
                    }
                }
            }
        }

        ret = ret.length > 1 ? jQuery.unique( ret ) : ret;

        return this.pushStack( ret, "closest", selectors );
    },

    // Determine the position of an element within
    // the matched set of elements
    index: function( elem ) {
        if ( !elem || typeof elem === "string" ) {
            return jQuery.inArray( this[0],
                // If it receives a string, the selector is used
                // If it receives nothing, the siblings are used
