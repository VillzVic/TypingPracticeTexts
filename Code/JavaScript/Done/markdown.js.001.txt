(function( expose ) {

var Markdown = expose.Markdown = function Markdown(dialect) {
  switch (typeof dialect) {
    case "undefined":
      this.dialect = Markdown.dialects.Gruber;
      break;
    case "object":
      this.dialect = dialect;
      break;
    default:
      if (dialect in Markdown.dialects) {
        this.dialect = Markdown.dialects[dialect];
      }
      else {
        throw new Error("Unknown Markdown dialect '" + String(dialect) + "'");
      }
      break;
  }
  this.em_state = [];
  this.strong_state = [];
  this.debug_indent = "";
}

expose.parse = function( source, dialect ) {
  var md = new Markdown( dialect );
  return md.toTree( source );
}

expose.toHTML = function toHTML( source ) {
  var input = expose.toHTMLTree( source );

  return expose.renderJsonML( input );
}

expose.toHTMLTree = function toHTMLTree( input, dialect ) {
  if ( typeof input ==="string" ) input = this.parse( input, dialect );

  var attrs = extract_attr( input ),
      refs = {};

  if ( attrs && attrs.references ) {
    refs = attrs.references;
  }

  var html = convert_tree_to_html( input, refs );
  merge_text_nodes( html );
  return html;
}

var mk_block = Markdown.mk_block = function(block, trail, line) {
  if ( arguments.length == 1 ) trail = "\n\n";

  var s = new String(block);
  s.trailing = trail;
  s.toSource = function() {
    return "Markdown.mk_block( " +
            uneval(block) +
