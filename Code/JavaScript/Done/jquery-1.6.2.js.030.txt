            }
        }

        thisCache = cache[ id ];

        // Internal jQuery data is stored in a separate object inside the object's data
        // cache in order to avoid key collisions between internal data and user-defined
        // data
        if ( pvt ) {
            if ( !thisCache[ internalKey ] ) {
                thisCache[ internalKey ] = {};
            }

            thisCache = thisCache[ internalKey ];
        }

        if ( data !== undefined ) {
            thisCache[ jQuery.camelCase( name ) ] = data;
        }

        // TODO: This is a hack for 1.5 ONLY. It will be removed in 1.6. Users should
        // not attempt to inspect the internal events object using jQuery.data, as this
        // internal data object is undocumented and subject to change.
        if ( name === "events" && !thisCache[name] ) {
            return thisCache[ internalKey ] && thisCache[ internalKey ].events;
        }

        return getByName ? 
            // Check for both converted-to-camel and non-converted data property names
            thisCache[ jQuery.camelCase( name ) ] || thisCache[ name ] :
            thisCache;
    },

    removeData: function( elem, name, pvt /* Internal Use Only */ ) {
        if ( !jQuery.acceptData( elem ) ) {
            return;
        }

        var internalKey = jQuery.expando, isNode = elem.nodeType,

            // See jQuery.data for more information
            cache = isNode ? jQuery.cache : elem,

            // See jQuery.data for more information
            id = isNode ? elem[ jQuery.expando ] : jQuery.expando;

        // If there is already no cache entry for this object, there is no
