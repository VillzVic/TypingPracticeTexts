        then do buf' <- fillReadBuffer (haFD handle_) True 
                                (haIsStream handle_) buf
                writeIORef ref buf'
                return True
        else do r <- throwErrnoIfMinus1Retry "hWaitForInput" $
                     fdReady (haFD handle_) 0 
                                (fromIntegral msecs)
                                (fromIntegral $ fromEnum $ haIsStream handle_)
                if r /= 0 then do
                                  hLookAhead' handle_
                                  return True
                          else return False

foreign import ccall safe "fdReady"
  fdReady :: CInt -> CInt -> CInt -> CInt -> IO CInt

hGetChar :: Handle -> IO Char
hGetChar handle =
  wantReadableHandle "hGetChar" handle $ \handle_ -> do

  let fd = haFD handle_
      ref = haBuffer handle_

  buf <- readIORef ref
  if not (bufferEmpty buf)
        then hGetcBuffered fd ref buf
        else do

  case haBufferMode handle_ of
    LineBuffering    -> do
        new_buf <- fillReadBuffer fd True (haIsStream handle_) buf
        hGetcBuffered fd ref new_buf
    BlockBuffering _ -> do
        new_buf <- fillReadBuffer fd True (haIsStream handle_) buf
        hGetcBuffered fd ref new_buf
    NoBuffering -> do
        let raw = bufBuf buf
        r <- readRawBuffer "hGetChar" fd (haIsStream handle_) raw 0 1
        if r == 0
           then ioe_EOF
           else do (c,_) <- readCharFromBuffer raw 0
                   return c

hGetcBuffered :: FD -> IORef Buffer -> Buffer -> IO Char
hGetcBuffered _ ref buf@Buffer{ bufBuf=b, bufRPtr=r0, bufWPtr=w }
 = do (c, r) <- readCharFromBuffer b r0
      let new_buf | r == w    = buf{ bufRPtr=0, bufWPtr=0 }
                  | otherwise = buf{ bufRPtr=r }
      writeIORef ref new_buf
      return c
