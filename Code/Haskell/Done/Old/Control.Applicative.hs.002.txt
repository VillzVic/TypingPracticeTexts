        pure = return
        (<*>) = ap

instance Applicative ((->) a) where
        pure = const
        (<*>) f g x = f x (g x)

instance Monoid a => Applicative ((,) a) where
        pure x = (mempty, x)
        (u, f) <*> (v, x) = (u `mappend` v, f x)

newtype Const a b = Const { getConst :: a }

instance Functor (Const m) where
        fmap _ (Const v) = Const v

instance Monoid m => Applicative (Const m) where
        pure _ = Const mempty
        Const f <*> Const v = Const (f `mappend` v)

newtype WrappedMonad m a = WrapMonad { unwrapMonad :: m a }

instance Monad m => Functor (WrappedMonad m) where
        fmap f (WrapMonad v) = WrapMonad (liftM f v)

instance Monad m => Applicative (WrappedMonad m) where
        pure = WrapMonad . return
        WrapMonad f <*> WrapMonad v = WrapMonad (f `ap` v)

instance MonadPlus m => Alternative (WrappedMonad m) where
        empty = WrapMonad mzero
        WrapMonad u <|> WrapMonad v = WrapMonad (u `mplus` v)

newtype WrappedArrow a b c = WrapArrow { unwrapArrow :: a b c }

instance Arrow a => Functor (WrappedArrow a b) where
        fmap f (WrapArrow a) = WrapArrow (a >>> arr f)

instance Arrow a => Applicative (WrappedArrow a b) where
        pure x = WrapArrow (arr (const x))
        WrapArrow f <*> WrapArrow v = WrapArrow (f &&& v >>> arr (uncurry id))

instance (ArrowZero a, ArrowPlus a) => Alternative (WrappedArrow a b) where
        empty = WrapArrow zeroArrow
        WrapArrow u <|> WrapArrow v = WrapArrow (u <+> v)

newtype ZipList a = ZipList { getZipList :: [a] }

instance Functor ZipList where
        fmap f (ZipList xs) = ZipList (map f xs)
