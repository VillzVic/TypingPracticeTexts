import Data.List( foldl, intersperse )
import Unsafe.Coerce

#ifdef __GLASGOW_HASKELL__
import GHC.Base
import GHC.Show         (Show(..), ShowS,
                         shows, showString, showChar, showParen)
import GHC.Err          (undefined)
import GHC.Num          (Integer, fromInteger, (+))
import GHC.Real         ( rem, Ratio )
import GHC.IOBase       (IORef,newIORef,unsafePerformIO)

import GHC.IOBase       ( IOArray, IO, MVar, Handle, block )
import GHC.ST           ( ST )
import GHC.STRef        ( STRef )
import GHC.Ptr          ( Ptr, FunPtr )
import GHC.Stable       ( StablePtr, newStablePtr, freeStablePtr,
                          deRefStablePtr, castStablePtrToPtr,
                          castPtrToStablePtr )
import GHC.Arr          ( Array, STArray )

#endif

#ifdef __HUGS__
import Hugs.Prelude     ( Key(..), TypeRep(..), TyCon(..), Ratio,
                          Handle, Ptr, FunPtr, ForeignPtr, StablePtr )
import Hugs.IORef       ( IORef, newIORef, readIORef, writeIORef )
import Hugs.IOExts      ( unsafePerformIO )
import Hugs.Array       ( Array )
import Hugs.IOArray
import Hugs.ConcBase    ( MVar )
#endif

#ifdef __NHC__
import NHC.IOExtras (IOArray,IORef,newIORef,readIORef,writeIORef,unsafePerformIO)
import IO (Handle)
import Ratio (Ratio)
import NHC.FFI  ( Ptr,FunPtr,StablePtr,ForeignPtr )
import Array    ( Array )
#endif

#include "Typeable.h"

#ifndef __HUGS__

data TypeRep = TypeRep !Key TyCon [TypeRep] 

instance Eq TypeRep where
  (TypeRep k1 _ _) == (TypeRep k2 _ _) = k1 == k2
