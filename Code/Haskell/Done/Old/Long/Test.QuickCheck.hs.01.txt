module Test.QuickCheck
  ( quickCheck
  , verboseCheck
  , test          -- :: prop -> IO ()
  
  , Config(..)
  , defaultConfig
  , check
 
  , forAll
  , (==>)
  
  , label
  , collect
  , classify
  , trivial
  
  , Gen
  
  , elements
  , two
  , three
  , four
  
  , sized
  , resize
  , choose
  , oneof
  , frequency
  
  , vector

  , Arbitrary(..)
  , rand
  , promote
  , variant

  , Testable(..)
  , Property

  , Result(..)
  , generate
  , evaluate
  )
 where

import Prelude

import System.Random
import Data.List( group, sort, intersperse )
import Control.Monad( liftM2, liftM3, liftM4 )

infixr 0 ==>
infix  1 `classify`

newtype Gen a
  = Gen (Int -> StdGen -> a)

sized :: (Int -> Gen a) -> Gen a
sized fgen = Gen (\n r -> let Gen m = fgen n in m n r)

resize :: Int -> Gen a -> Gen a
resize n (Gen m) = Gen (\_ r -> m n r)

rand :: Gen StdGen
rand = Gen (\n r -> r)

promote :: (a -> Gen b) -> Gen (a -> b)
promote f = Gen (\n r -> \a -> let Gen m = f a in m n r)

variant :: Int -> Gen a -> Gen a
variant v (Gen m) = Gen (\n r -> m n (rands r v))
 where
  rands r0 0 = r0
  rands r0 n = let (r1,r2) = split r0
                   (n',s)  = n `quotRem` 2
               in case s of
                    0 -> rands r1 n'
                    _ -> rands r2 n'

generate :: Int -> StdGen -> Gen a -> a
generate n rnd (Gen m) = m size rnd'
 where
  (size, rnd') = randomR (0, n) rnd

instance Functor Gen where
  fmap f m = m >>= return . f

instance Monad Gen where
  return a    = Gen (\n r -> a)
  Gen m >>= k =
    Gen (\n r0 -> let (r1,r2) = split r0
                      Gen m'  = k (m n r1)
                   in m' n r2)

choose :: Random a => (a, a) -> Gen a
choose bounds = (fst . randomR bounds) `fmap` rand

elements :: [a] -> Gen a
elements xs = (xs !!) `fmap` choose (0, length xs - 1)
