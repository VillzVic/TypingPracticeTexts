  let contentMatches = map matchResourceName matchLines
  allPages <- liftM (filter isPageFile) $ liftIO $ index fs
  let slashToSpace = map (\c -> if c == '/' then ' ' else c)
  let inPageName pageName' x = x `elem` (words $ slashToSpace $ dropExtension pageName')
  let matchesPatterns pageName' = not (null patterns) &&
       all (inPageName (map toLower pageName')) (map (map toLower) patterns)
  let pageNameMatches = filter matchesPatterns allPages
  let allMatchedFiles = nub $ filter isPageFile contentMatches ++
                              pageNameMatches
  let matchesInFile f =  mapMaybe (\x -> if matchResourceName x == f
                                            then Just (matchLine x)
                                            else Nothing) matchLines
  let matches = map (\f -> (f, matchesInFile f)) allMatchedFiles
  let relevance (f, ms) = length ms + if f `elem` pageNameMatches
                                         then 100
                                         else 0
  let preamble = if null patterns 
                    then h3 << ["Please enter a search term."]
                    else h3 << [ stringToHtml (show (length matches) ++ " matches found for ")
                               , thespan ! [identifier "pattern"] << unwords patterns]
  base' <- getWikiBase
  let toMatchListItem (file, contents) = li <<
        [ anchor ! [href $ base' ++ urlForPage (dropExtension file)] << dropExtension file
        , stringToHtml (" (" ++ show (length contents) ++ " matching lines)")
        , stringToHtml " "
        , anchor ! [href "#", theclass "showmatch",
