         is_tick = case binds of 
                     AnnNonRec id _ -> occNameFS (getOccName id) == tickFS
                     _other -> False

         compile_bind d' fvs x rhs size arity off = do
                bco <- schemeR fvs (x,rhs)
                build_thunk d' fvs size bco off arity

         compile_binds = 
            [ compile_bind d' fvs x rhs size arity n
            | (fvs, x, rhs, size, arity, n) <- 
                zip6 fvss xs rhss sizes arities [n_binds, n_binds-1 .. 1]
            ]
     in do
     body_code <- schemeE d' s p' body
     thunk_codes <- sequence compile_binds
     return (alloc_code `appOL` concatOL thunk_codes `appOL` body_code)

schemeE d s p exp@(AnnCase {})
   | Just (_tickInfo, _rhs) <- isTickedExp' exp
   = if isUnLiftedType ty
        then do
          id <- newId (mkFunTy realWorldStatePrimTy ty)
          st <- newId realWorldStatePrimTy
          let letExp = AnnLet (AnnNonRec id (fvs, AnnLam st (emptyVarSet, exp)))
                              (emptyVarSet, (AnnApp (emptyVarSet, AnnVar id) 
                                                    (emptyVarSet, AnnVar realWorldPrimId)))
          schemeE d s p letExp
        else do
          id <- newId ty
          let letExp = AnnLet (AnnNonRec id (fvs, exp)) (emptyVarSet, AnnVar id)
          schemeE d s p letExp
   where exp' = deAnnotate' exp
         fvs  = exprFreeVars exp'
         ty   = exprType exp'

schemeE d s p (AnnCase scrut _ _ [(DataAlt dc, [bind1, bind2], rhs)])
   | isUnboxedTupleCon dc, VoidArg <- typeCgRep (idType bind1)

   =
     doCase d s p scrut bind2 [(DEFAULT, [], rhs)] True 

   | isUnboxedTupleCon dc, VoidArg <- typeCgRep (idType bind2)
