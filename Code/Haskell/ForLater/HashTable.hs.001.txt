{-# OPTIONS_GHC -XNoImplicitPrelude -funbox-strict-fields #-}

module Data.HashTable (
        HashTable, new, insert, delete, lookup, update,
        fromList, toList,
        hashInt, hashString,
        prime,
        longestChain
 ) where

#ifdef __GLASGOW_HASKELL__
import GHC.Base
#else
import Prelude  hiding  ( lookup )
#endif
import Data.Tuple       ( fst )
import Data.Bits
import Data.Maybe
import Data.List        ( maximumBy, length, concat, foldl', partition )
import Data.Int         ( Int32 )

#if defined(__GLASGOW_HASKELL__)
import GHC.Num
import GHC.Real         ( fromIntegral )
import GHC.Show         ( Show(..) )
import GHC.Int          ( Int64 )

import GHC.IOBase       ( IO, IOArray, newIOArray,
                          unsafeReadIOArray, unsafeWriteIOArray, unsafePerformIO,
                          IORef, newIORef, readIORef, writeIORef )
#else
import Data.Char        ( ord )
import Data.IORef       ( IORef, newIORef, readIORef, writeIORef )
import System.IO.Unsafe ( unsafePerformIO )
import Data.Int         ( Int64 )
#  if defined(__HUGS__)
import Hugs.IOArray     ( IOArray, newIOArray,
                          unsafeReadIOArray, unsafeWriteIOArray )
#  elif defined(__NHC__)
import NHC.IOExtras     ( IOArray, newIOArray, readIOArray, writeIOArray )
#  endif
#endif
import Control.Monad    ( mapM, mapM_, sequence_ )

iNSTRUMENTED :: Bool
iNSTRUMENTED = False

readHTArray  :: HTArray a -> Int32 -> IO a
writeMutArray :: MutArray a -> Int32 -> a -> IO ()
freezeArray  :: MutArray a -> IO (HTArray a)
