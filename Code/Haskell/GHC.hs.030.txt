                  return old_summary{ ms_obj_date = obj_timestamp }
           else
                new_summary

   | otherwise
   = new_summary
  where
    new_summary = do
        let dflags = hsc_dflags hsc_env

        (dflags', hspp_fn, buf)
            <- preprocessFile hsc_env file mb_phase maybe_buf

        (srcimps,the_imps, L _ mod_name) <- getImports dflags' buf hspp_fn file

        location <- liftIO $ mkHomeModLocation dflags mod_name file

        mod <- liftIO $ addHomeModuleToFinder hsc_env mod_name location

        src_timestamp <- case maybe_buf of
                           Just (_,t) -> return t
                           Nothing    -> liftIO $ getModificationTime file

        obj_timestamp <-
            if isObjectTarget (hscTarget (hsc_dflags hsc_env)) 
               || obj_allowed
                then liftIO $ modificationTimeIfExists (ml_obj_file location)
                else return Nothing

        return (ModSummary { ms_mod = mod, ms_hsc_src = HsSrcFile,
                             ms_location = location,
                             ms_hspp_file = hspp_fn,
                             ms_hspp_opts = dflags',
                             ms_hspp_buf  = Just buf,
                             ms_srcimps = srcimps, ms_imps = the_imps,
                             ms_hs_date = src_timestamp,
                             ms_obj_date = obj_timestamp })

findSummaryBySourceFile :: [ModSummary] -> FilePath -> Maybe ModSummary
findSummaryBySourceFile summaries file
  = case [ ms | ms <- summaries, HsSrcFile <- [ms_hsc_src ms],
                                 expectJust "findSummaryBySourceFile" (ml_hs_file (ms_location ms)) == file ] of
        [] -> Nothing
        (x:_) -> Just x

summariseModule
          :: HscEnv
          -> NodeMap ModSummary
