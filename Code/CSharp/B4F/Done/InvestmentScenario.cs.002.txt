                return (decimal)chanceOfMeetingTarget;
            }
        }

        public decimal InternalRateOfReturn
        {
            get
            {
                if (internalRateOfReturn == null)
                    internalRateOfReturn = FinancialMath.InternalRateOfReturn(CashFlow);

                return (decimal)internalRateOfReturn;
            }
        }

        public decimal StandardDeviationOfTheMean
        {
            get
            {
                if (standardDeviationOfTheMean == null)
                    standardDeviationOfTheMean = (Autocorrelation ? 4m / 3m : 1m)
                                               * StandardDeviation / FinancialMath.Sqrt(EffectivePeriod);

                return (decimal)standardDeviationOfTheMean;
            }
        }

        public decimal EffectivePeriod
        {
            get
            {
                if (effectivePeriod == null)
                {
                    List<decimal> cashFlowList = CashFlow.ToList();
                    int firstDepositIndex = cashFlowList.FindIndex(amount => amount > 0m);
                    int firstWithdrawalIndex = cashFlowList.FindIndex(amount => amount < 0m);

                    int depositCount = CashFlow.Count(amount => amount > 0m);
                    int withdrawalCount = CashFlow.Count(amount => amount < 0m);

                    decimal periodicLumpsumRatio = (decimal)(depositCount - 1) / (decimal)(firstWithdrawalIndex - 1);

                    decimal lumpsumBuildupPeriod = (decimal)(firstWithdrawalIndex - firstDepositIndex);
                    decimal periodicBuildupPeriod = 0.75m * lumpsumBuildupPeriod
                                                  - 0.1m * (decimal)Math.Min(9, DepositsPerYear)
                                                  + 0.75m;

                    decimal buildupPeriod = periodicLumpsumRatio * periodicBuildupPeriod
                                          + (1m - periodicLumpsumRatio) * lumpsumBuildupPeriod;
                    decimal reductionPeriod = 0.75m * (decimal)(withdrawalCount - 1)
                                            + 0.1m * (decimal)Math.Min(9, WithdrawalsPerYear);

                    effectivePeriod = buildupPeriod + reductionPeriod;
                }

                return (decimal)effectivePeriod;
            }
        }

        private decimal? chanceOfMeetingTarget;
        private decimal? internalRateOfReturn;
        private decimal? standardDeviationOfTheMean;
        private decimal? effectivePeriod;
    }
}
