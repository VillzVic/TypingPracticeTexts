using System;
using System.Collections.Generic;
using System.Linq;
using B4F.TotalGiro.ClientApplicationLayer.Common;

namespace B4F.TotalGiro.ClientApplicationLayer.Planning
{
    public class InvestmentScenario
    {
        public InvestmentScenario(decimal totalPresentValue, decimal totalDepositPerYear, int yearsLeft, decimal targetValue,
                          decimal expectedReturn, decimal standardDeviation)
            : this(null, expectedReturn, standardDeviation)
        {
            CashFlow = (new decimal[] { totalPresentValue })
                .Concat(Enumerable.Repeat(totalDepositPerYear, yearsLeft))
                .Concat(new decimal[] { -targetValue })
                .ToArray();
        }

        public InvestmentScenario(IEnumerable<decimal> cashFlow, decimal expectedReturn, decimal standardDeviation)
        {
            CashFlow = cashFlow != null ? cashFlow.ToArray() : new decimal[] { };
            
            ExpectedReturn = expectedReturn;
            StandardDeviation = standardDeviation;
        }

        public decimal[] CashFlow { get; private set; }
        public decimal ExpectedReturn { get; private set; }
        public decimal StandardDeviation { get; private set; }

        public bool Autocorrelation { get { return true; } }
        public int DepositsPerYear { get { return 12; } }
        public int WithdrawalsPerYear { get { return 12; } }

        public decimal ChanceOfMeetingTarget
        {
            get
            {
                if (chanceOfMeetingTarget == null)
                {
                    if (CashFlow.Where(amount => amount > 0m).Count() == 0)
                        chanceOfMeetingTarget = CashFlow.Where(amount => amount < 0m).Count() == 0
                                                    ? 1m
                                                    : 0m;
                    else
                        chanceOfMeetingTarget = 1m - FinancialMath.CumulativeNormalDistribution(InternalRateOfReturn,
                                                                                                ExpectedReturn, StandardDeviationOfTheMean);
                }
