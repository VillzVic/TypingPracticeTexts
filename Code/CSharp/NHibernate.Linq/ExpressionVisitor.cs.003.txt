				return Expression.ElementInit(initializer.AddMethod, arguments);
			}
			return initializer;
		}

		protected virtual Expression VisitUnary(UnaryExpression u)
		{
			Expression operand = Visit(u.Operand);
			if (operand != u.Operand)
			{
				return Expression.MakeUnary(u.NodeType, operand, u.Type, u.Method);
			}
			return u;
		}

		protected virtual Expression VisitBinary(BinaryExpression b)
		{
			Expression left = Visit(b.Left);
			Expression right = Visit(b.Right);
			Expression conversion = Visit(b.Conversion);

			if (left != b.Left || right != b.Right || conversion != b.Conversion)
			{
				if (b.NodeType == ExpressionType.Coalesce && b.Conversion != null)
					return Expression.Coalesce(left, right, conversion as LambdaExpression);
				else
					return Expression.MakeBinary(b.NodeType, left, right, b.IsLiftedToNull, b.Method);
			}
			return b;
		}

		protected virtual Expression VisitTypeIs(TypeBinaryExpression b)
		{
			Expression expr = Visit(b.Expression);
			if (expr != b.Expression)
			{
				return Expression.TypeIs(expr, b.TypeOperand);
			}
			return b;
		}

		protected virtual Expression VisitConstant(ConstantExpression c)
		{
			return c;
		}

		protected virtual Expression VisitConditional(ConditionalExpression c)
		{
			Expression test = Visit(c.Test);
			Expression ifTrue = Visit(c.IfTrue);
