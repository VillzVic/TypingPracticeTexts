				leftPropertyName = ((SimpleExpression)InnerCriterion).PropertyName;
			}
			else if (InnerCriterion is PropertyExpression)
			{
				System.Type type = typeof(PropertyExpression);
				leftPropertyName =
					type.GetField("_lhsPropertyName", BindingFlags.NonPublic | BindingFlags.Instance).GetValue(InnerCriterion) as
					String;
				rightPropertyName =
					type.GetField("_rhsPropertyName", BindingFlags.NonPublic | BindingFlags.Instance).GetValue(InnerCriterion) as
					String;
			}

			AddParameters(leftPropertyName, sql, criteria, criteriaQuery);
			sql.Add(" ").Add(Op).Add(" ");

			if (RightFunction != null)
			{
				RightFunction.AddParameters(rightPropertyName, sql, criteria, criteriaQuery);
			}
			else
			{
				sql.AddParameter();
			}

			return sql.ToSqlString();
		}

		public IProjection[] GetProjections()
		{
			return null;
		}

		#endregion

		private void AddParameters(String propertyName, SqlStringBuilder sql, ICriteria criteria, ICriteriaQuery criteriaQuery)
		{
			bool hasProperty = false;
			bool hasParameter = false;

			sql.Add(FunctionName).Add("(");

			if (ParameterValues != null && ParameterValues.Length > 0)
			{
				for (int i = 0; i < ParameterValues.Length; i++)
				{
					if (PropertyPosition == i)
					{
						if (i > 0) sql.Add(", ");
						sql.Add(criteriaQuery.GetColumn(criteria, propertyName)).Add(", ");
						hasProperty = true;
					}
					else if (i > 0)
					{
						sql.Add(", ");
					}

					sql.AddParameter();
					hasParameter = true;
				}
			}
			if (!hasProperty)
			{
				if (hasParameter) sql.Add(", ");
				sql.Add(criteriaQuery.GetColumn(criteria, propertyName));
			}

			sql.Add(")");
		}
	}
}
