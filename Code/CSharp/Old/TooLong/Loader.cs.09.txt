			if (persister.HasSubclasses)
			{
				object discriminatorValue =
					persister.DiscriminatorType.NullSafeGet(rs, EntityAliases[i].SuffixedDiscriminatorAlias, session, null);

				string result = persister.GetSubclassForDiscriminatorValue(discriminatorValue);

				if (result == null)
				{
					throw new WrongClassException(string.Format("Discriminator was: '{0}'", discriminatorValue), id,
					                              persister.EntityName);
				}

				return result;
			}
			else
			{
				return persister.EntityName;
			}
		}

		internal void Advance(IDataReader rs, RowSelection selection)
		{
			int firstRow = GetFirstRow(selection);

			if (firstRow != 0)
			{
				for (int i = 0; i < firstRow; i++)
				{
					rs.Read();
				}
			}
		}

		internal static bool HasMaxRows(RowSelection selection)
		{
			return selection != null && selection.MaxRows != RowSelection.NoValue;
		}

		internal static int GetFirstRow(RowSelection selection)
		{
			if (selection == null || !selection.DefinesLimits)
				return 0;
			else
				return selection.FirstRow > 0
						? selection.FirstRow
						: 0;
		}

		internal static bool UseLimit(RowSelection selection, Dialect.Dialect dialect)
		{
			return dialect.SupportsLimit && HasMaxRows(selection);
		}

		protected internal int BindPositionalParameters(
			IDbCommand st,
			QueryParameters queryParameters,
			int start,
			ISessionImplementor session)
		{
			object[] values = queryParameters.FilteredPositionalParameterValues;
			IType[] types = queryParameters.FilteredPositionalParameterTypes;

			int span = 0;
			for (int i = 0; i < values.Length; i++)
			{
				types[i].NullSafeSet(st, values[i], start + span, session);
				span += types[i].GetColumnSpan(session.Factory);
			}

			return span;
		}

		protected virtual SqlString ProcessFilters(QueryParameters parameters, ISessionImplementor session)
		{
			parameters.ProcessFilters(SqlString, session);
			return parameters.FilteredSQL;
		}

		protected internal virtual IDbCommand PrepareQueryCommand(
			QueryParameters parameters,
			bool scroll,
			ISessionImplementor session)
		{
			SqlString sqlString = ProcessFilters(parameters, session);
			Dialect.Dialect dialect = session.Factory.Dialect;

			RowSelection selection = parameters.RowSelection;
			bool useLimit = UseLimit(selection, dialect);
			bool hasFirstRow = GetFirstRow(selection) > 0;
			bool useOffset = hasFirstRow && useLimit && dialect.SupportsLimitOffset;

			if (useLimit)
			{
				sqlString = dialect.GetLimitString(sqlString.Trim(),
				                                   useOffset ? GetFirstRow(selection) : 0,
				                                   GetMaxOrLimit(dialect, selection));
			}

			sqlString = PreprocessSQL(sqlString, parameters, dialect);
