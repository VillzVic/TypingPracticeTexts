using System;
using System.Collections;
using System.Data;
using System.Runtime.CompilerServices;
using Iesi.Collections;
using log4net;
using NHibernate.AdoNet;
using NHibernate.Cache;
using NHibernate.Collection;
using NHibernate.Engine;
using NHibernate.Event;
using NHibernate.Exceptions;
using NHibernate.Impl;
using NHibernate.Persister.Collection;
using NHibernate.Persister.Entity;
using NHibernate.Proxy;
using NHibernate.SqlCommand;
using NHibernate.SqlTypes;
using NHibernate.Transform;
using NHibernate.Type;
using NHibernate.Util;
using Iesi.Collections.Generic;

namespace NHibernate.Loader
{
	public abstract class Loader
	{
		private static readonly ILog log = LogManager.GetLogger(typeof(Loader));

		private readonly ISessionFactoryImplementor factory;
		private ColumnNameCache columnNameCache;

		public Loader(ISessionFactoryImplementor factory)
		{
			this.factory = factory;
		}

		protected internal abstract SqlString SqlString { get; set; }

		protected internal abstract ILoadable[] EntityPersisters { get; set; }

		protected virtual int[] Owners
		{
			get { return null; }
			set { throw new NotSupportedException("Loader.set_Owners"); }
		}

		protected virtual EntityType[] OwnerAssociationTypes
		{
			get { return null; }
		}

		protected abstract ICollectionPersister[] CollectionPersisters { get; }

		protected virtual int[] CollectionOwners
		{
			get { return null; }
		}

		protected internal abstract LockMode[] GetLockModes(IDictionary lockModes);

		protected virtual SqlString ApplyLocks(SqlString sql, IDictionary lockModes, Dialect.Dialect dialect)
		{
			return sql;
		}

		protected virtual bool UpgradeLocks()
		{
			return false;
		}

		protected virtual bool IsSingleRowLoader
		{
			get { return false; }
		}

		protected virtual string[] Aliases
		{
			get { return null; }
		}

		protected virtual SqlString PreprocessSQL(SqlString sql, QueryParameters parameters, Dialect.Dialect dialect)
		{
			sql = ApplyLocks(sql, parameters.LockModes, dialect);

			return sql;
		}

		private IList DoQueryAndInitializeNonLazyCollections(
			ISessionImplementor session,
			QueryParameters queryParameters,
			bool returnProxies)
		{
			IPersistenceContext persistenceContext = session.PersistenceContext;

			persistenceContext.BeforeLoad();
			IList result;
			try
			{
				result = DoQuery(session, queryParameters, returnProxies);
