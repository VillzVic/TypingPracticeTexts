		 //1. record the collection role that this collection is referenced by
		 //2. decide if the collection needs deleting/creating/updating (but don't actually schedule the action yet)
		private static void PrepareCollectionForUpdate(IPersistentCollection coll, CollectionEntry entry)
		{
			if (entry.IsProcessed)
				throw new AssertionFailure("collection was processed twice by flush()");

			entry.IsProcessed = true;

			ICollectionPersister loadedPersister = entry.LoadedPersister;
			ICollectionPersister currentPersister = entry.CurrentPersister;
			if (loadedPersister != null || currentPersister != null)
			{
				// it is or was referenced _somewhere_
				bool ownerChanged = loadedPersister != currentPersister ||
					!currentPersister.KeyType.IsEqual(entry.LoadedKey, entry.CurrentKey, EntityMode.Poco);

				if (ownerChanged)
				{
					// do a check
					bool orphanDeleteAndRoleChanged = loadedPersister != null && 
						currentPersister != null && loadedPersister.HasOrphanDelete;

					if (orphanDeleteAndRoleChanged)
					{
						throw new HibernateException("Don't change the reference to a collection with cascade=\"all-delete-orphan\": " + loadedPersister.Role);
					}

					// do the work
					if (currentPersister != null)
					{
						entry.IsDorecreate = true; // we will need to create new entries
					}

					if (loadedPersister != null)
					{
						entry.IsDoremove = true; // we will need to remove ye olde entries
						if (entry.IsDorecreate)
						{
							log.Debug("Forcing collection initialization");
							coll.ForceInitialization(); // force initialize!
						}
					}
				}
				else if (coll.IsDirty)
				{
					// else if it's elements changed
					entry.IsDoupdate = true;
				}
			}
		}

		/// <summary> 
		/// Initialize the role of the collection. 
		/// </summary>
		/// <param name="collection">The collection to be updated by reachibility. </param>
		/// <param name="type">The type of the collection. </param>
		/// <param name="entity">The owner of the collection. </param>
		/// <param name="session">The session.</param>
		public static void ProcessReachableCollection(IPersistentCollection collection, CollectionType type, object entity, ISessionImplementor session)
		{
			collection.Owner = entity;
			CollectionEntry ce = session.PersistenceContext.GetCollectionEntry(collection);

			if (ce == null)
			{
				// refer to comment in StatefulPersistenceContext.addCollection()
				throw new HibernateException(string.Format("Found two representations of same collection: {0}", type.Role));
			}

			// The CollectionEntry.isReached() stuff is just to detect any silly users  
			// who set up circular or shared references between/to collections.
			if (ce.IsReached)
			{
				// We've been here before
				throw new HibernateException(string.Format("Found shared references to a collection: {0}", type.Role));
			}
			ce.IsReached = true;

			ISessionFactoryImplementor factory = session.Factory;
			ICollectionPersister persister = factory.GetCollectionPersister(type.Role);
			ce.CurrentPersister = persister;
			ce.CurrentKey = type.GetKeyOfOwner(entity, session); //TODO: better to pass the id in as an argument?

			if (log.IsDebugEnabled)
			{
				log.Debug("Collection found: " + 
					MessageHelper.InfoString(persister, ce.CurrentKey, factory) + ", was: " + 
					MessageHelper.InfoString(ce.LoadedPersister, ce.LoadedKey, factory) + 
					(collection.WasInitialized ? " (initialized)" : " (uninitialized)"));
			}

			PrepareCollectionForUpdate(collection, ce);
		}
	}
}
