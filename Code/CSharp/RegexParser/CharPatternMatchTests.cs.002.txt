        public void MatchOverlap()
        {
            Match2[] matches = Regex2.Matches("Some thinthing or another", "thing").ToArray();
            Match2[] expected = new Match2[] {
                Factory.CreateMatch(9, 5, "thing")
            };

            CollectionAssert.AreEqual(expected, matches, "False overlap.");

            matches = Regex2.Matches("This is alfalfa", "alfa").ToArray();
            expected = new Match2[] {
                Factory.CreateMatch(8, 4, "alfa")
            };

            CollectionAssert.AreEqual(expected, matches, "Real overlap.");

            matches = Regex2.Matches("This is alfalfalfa", "alfa").ToArray();
            expected = new Match2[] {
                Factory.CreateMatch(8, 4, "alfa"),
                Factory.CreateMatch(14, 4, "alfa")
            };

            CollectionAssert.AreEqual(expected, matches, "Double overlap.");
        }

        [Test]
        public void CompareToMsoft()
        {
            RegexAssert.AreMatchesSameAsMsoft("Something or other", "xyz");
            RegexAssert.AreMatchesSameAsMsoft("Something or other", "thing");

            RegexAssert.IsFirstMatchSameAsMsoft("A thing or another thing", "thing");
            RegexAssert.AreMatchesSameAsMsoft("A thing or another thing", "thing");

            RegexAssert.AreMatchesSameAsMsoft("Some thinthing or another", "thing");
            RegexAssert.AreMatchesSameAsMsoft("This is alfalfa", "alfa");
            RegexAssert.AreMatchesSameAsMsoft("This is alfalfalfa", "alfa");
            RegexAssert.AreMatchesSameAsMsoft("This is alfalfalf", "alfa");
        }

        [Test]
        public void Grouping()
        {
            string input = "A thing or another thing";

            RegexAssert.AreMatchesSameAsMsoft(input, "th(in)g");
            RegexAssert.AreMatchesSameAsMsoft(input, "(thing)");
            RegexAssert.AreMatchesSameAsMsoft(input, "t(hi)n(g)");
            RegexAssert.AreMatchesSameAsMsoft(input, "t(h(i)n)g");
            RegexAssert.AreMatchesSameAsMsoft(input, "th(((((in)))))g");
        }

        [Test]
        public void Grouping_Errors()
        {
            string input = "A thing or another thing";

            Assert.Catch<ArgumentException>(() => { Regex2.Match(input, "th((in)g"); });
            Assert.Catch<ArgumentException>(() => { Regex2.Match(input, "th((in)))g"); });
            Assert.Catch<ArgumentException>(() => { Regex2.Match(input, "(t(h(in))g"); });
            Assert.Catch<ArgumentException>(() => { Regex2.Match(input, "thing)))"); });
            Assert.Catch<ArgumentException>(() => { Regex2.Match(input, "(thing"); });
            Assert.Catch<ArgumentException>(() => { Regex2.Match(input, ")thing"); });
            Assert.Catch<ArgumentException>(() => { Regex2.Match(input, "thi)ng"); });
        }
    }
}
