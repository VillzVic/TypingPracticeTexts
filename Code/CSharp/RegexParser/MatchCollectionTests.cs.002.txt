            Assert.AreEqual(2, coll.Count, "Second null.");
        }

        [Test]
        public void ManyMatches()
        {
            MatchCollection2 coll = Factory.CreateMatchCollection(getMatchChain(1, 0));
            Assert.AreEqual(0, coll.Count, "1 to 0.");

            coll = Factory.CreateMatchCollection(getMatchChain(0, 0));
            Assert.AreEqual(1, coll.Count, "From 0 to 0.");

            coll = Factory.CreateMatchCollection(getMatchChain(5, 5));
            Assert.AreEqual(1, coll.Count, "From 5 to 5.");

            coll = Factory.CreateMatchCollection(getMatchChain(1, 10));
            Assert.AreEqual(10, coll.Count, "From 1 to 10.");

            int from = 1000, to = 4000;
            coll = Factory.CreateMatchCollection(getMatchChain(from, to));
            Assert.AreEqual(to - from + 1, coll.Count, string.Format("From {0} to {1}.", from, to));
            
            Assert.AreEqual(to, coll[to - from].Index, "Index");
            Assert.AreEqual(to, coll[to - from].Length, "Length");
            Assert.AreEqual("Match" + to.ToString(), coll[to - from].Value, "Value");
        }

        [Test]
        public void PerformanceTest()
        {
            const int n1 = 100, n2 = 500, n3 = 1800, n4 = 1850, n5 = 3500;
            
            Counter counter = new Counter();
            MatchCollection2 coll = Factory.CreateMatchCollection(() => getMatchChain(0, counter));
            
            IEnumerable<Match2> seq1 = coll.Take(n1),
                                seq2 = coll.Take(n2);

            Assert.AreEqual(0, counter.Value, "Start.");

            Assert.AreEqual(n1 - 1, seq1.Last().Index, "First/n1");
            Assert.AreEqual(n1, counter.Value, "First/counter/1");
            Assert.AreEqual(n2 - 1, seq2.Last().Index, "First/n2");
            Assert.AreEqual(n2, counter.Value, "First/counter/2");

            Assert.AreEqual(n1 - 1, seq1.Last().Index, "Second/n1");
            Assert.AreEqual(n2, counter.Value, "Second/counter/1");
            Assert.AreEqual(n2 - 1, seq2.Last().Index, "Second/n2");
            Assert.AreEqual(n2, counter.Value, "Second/counter/2");
