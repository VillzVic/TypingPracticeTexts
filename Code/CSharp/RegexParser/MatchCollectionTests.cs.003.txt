            IEnumerable<Match2> seq3 = coll.Take(n3),
                                seq4 = coll.Take(n4),
                                seq5 = coll.Take(n5);

            Assert.AreEqual(n3 - 1, seq3.Last().Index, "First/n3");
            Assert.AreEqual(n3, counter.Value, "First/counter/3");
            Assert.AreEqual(n4 - 1, seq4.Last().Index, "First/n4");
            Assert.AreEqual(n4, counter.Value, "First/counter/4");
            Assert.AreEqual(n5 - 1, seq5.Last().Index, "First/n5");
            Assert.AreEqual(n5, counter.Value, "First/counter/5");
        }

        [Test]
        public static void NextMatchTest()
        {
            const int n1 = 5000, n2 = 5300, n3 = 5500, n4 = 7000;

            Counter counter = new Counter();
            MatchCollection2 coll = Factory.CreateMatchCollection(getMatches(n1, counter));

            Assert.AreEqual(0, counter.Value);

            for (Match2 match = coll.First(); match.Index < n2; match = match.NextMatch()) ;
            Assert.AreEqual(n2 - n1 + 1, counter.Value);

            for (Match2 match = coll.First(); match.Index < n3; match = match.NextMatch()) ;
            Assert.AreEqual(n3 - n1 + 1, counter.Value);

            for (Match2 match = coll.First(); match.Index < n4; match = match.NextMatch()) ;
            Assert.AreEqual(n4 - n1 + 1, counter.Value);

            for (Match2 match = coll.First(); match.Index < n2; match = match.NextMatch()) ;
            Assert.AreEqual(n4 - n1 + 1, counter.Value);
        }

        private static Match2 getMatchChain(int from, int to)
        {
            if (from <= to)
                return Factory.CreateMatch(from, from, string.Format("Match{0}", from), () => getMatchChain(from + 1, to));
            else
                return Match2.Empty;
        }

        private static Match2 getMatchChain(int from, Counter counter)
        {
            counter.Inc();

            return Factory.CreateMatch(from, from, string.Format("Match{0}", from), () => getMatchChain(from + 1, counter));
        }

        private static IEnumerable<Match2> getMatches(int from, Counter counter)
        {
            for (int i = from; ; i++)
            {
                counter.Inc();
                yield return Factory.CreateMatch(i, i, string.Format("Match{0}", i));
            }
        }
    }
}
