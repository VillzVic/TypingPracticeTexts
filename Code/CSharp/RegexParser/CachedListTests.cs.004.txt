            Assert.AreEqual(0, counter.Value, "First/counter/0");
            
            IEnumerable<int> seq1 = numbersEnum.Take(n1),
                             seq2 = numbersEnum.Take(n2);

            Assert.AreEqual(n1 - 1, seq1.Last(), "First/n1");
            Assert.AreEqual(n1, counter.Value, "First/counter/1");
            Assert.AreEqual(n2 - 1, seq2.Last(), "First/n2");
            Assert.AreEqual(n1 + n2, counter.Value, "First/counter/2");

            Assert.AreEqual(n1 - 1, seq1.Last(), "Second/n1");
            Assert.AreEqual(2 * n1 + n2, counter.Value, "Second/counter/1");
            Assert.AreEqual(n2 - 1, seq2.Last(), "Second/n2");
            Assert.AreEqual(2 * (n1 + n2), counter.Value, "Second/counter/2");
        }

        [Test]
        public void PerformanceTest_List()
        {
            Counter counter = new Counter();
            List<int> numbersList = getNaturalNumbers(counter).Take(n2).ToList();

            Assert.AreEqual(n2, counter.Value, "First/counter/0");

            IEnumerable<int> seq1 = numbersList.Take(n1),
                             seq2 = numbersList.Take(n2);

            Assert.AreEqual(n1 - 1, seq1.Last(), "First/n1");
            Assert.AreEqual(n2, counter.Value, "First/counter/1");
            Assert.AreEqual(n2 - 1, seq2.Last(), "First/n2");
            Assert.AreEqual(n2, counter.Value, "First/counter/2");

            Assert.AreEqual(n1 - 1, seq1.Last(), "Second/n1");
            Assert.AreEqual(n2, counter.Value, "Second/counter/1");
            Assert.AreEqual(n2 - 1, seq2.Last(), "Second/n2");
            Assert.AreEqual(n2, counter.Value, "Second/counter/2");
        }
        
        [Test]
        public void PerformanceTest_CachedList()
        {
            Counter counter = new Counter();
            CachedList<int> numbersCachedList = new CachedList<int>(getNaturalNumbers(counter));

            Assert.AreEqual(0, counter.Value, "First/counter/0");

            IEnumerable<int> seq1 = numbersCachedList.Take(n1),
                             seq2 = numbersCachedList.Take(n2);
