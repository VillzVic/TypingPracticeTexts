using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace RegexParser.Util
{
    public class CachedList<T> : IEnumerable<T>
    {
        public CachedList(IEnumerable<T> originalColl)
        {
            if (originalColl == null)
                throw new ArgumentNullException("originalColl", "Could not build CachedList.");
            
            originalEnumerator = originalColl.GetEnumerator();

            OriginalIndex = -1;
            IsOriginalAfterEnd = false;
        }

        private List<T> cache = new List<T>();
        
        private IEnumerator<T> originalEnumerator;

        public int OriginalIndex { get; private set; }
        public bool IsOriginalAfterEnd { get; private set; }

        public T this[int index]
        {
            get
            {
                if (IsValidIndex(index))
                    return cache[index];
                else
                    throw new ArgumentOutOfRangeException(
                                    "index",
                                    "Index was out of range. Must be non-negative and less than the size of the collection.");
            }
        }

        public bool IsValidIndex(int index)
        {
            if (index < 0)
                return false;

            while (OriginalIndex < index)
            {
                IsOriginalAfterEnd = IsOriginalAfterEnd || !originalEnumerator.MoveNext();
