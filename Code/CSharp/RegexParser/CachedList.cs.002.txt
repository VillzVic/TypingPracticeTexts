                if (IsOriginalAfterEnd)
                    return false;

                cache.Add(originalEnumerator.Current);
                OnNextOriginal(originalEnumerator.Current, ++OriginalIndex);
            }

            return true;
        }

        protected virtual void OnNextOriginal(T item, int originalIndex)
        {
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return new Enumerator(this);
        }

        public IEnumerator<T> GetEnumerator()
        {
            return new Enumerator(this);
        }

        public struct Enumerator : IEnumerator<T>
        {
            public Enumerator(CachedList<T> parent)
            {
                this.currentIndex = -1;
                this.current = default(T);
                this.parent = parent;
            }

            private int currentIndex;
            private T current;
            private CachedList<T> parent;

            object IEnumerator.Current { get { return current; } }
            T IEnumerator<T>.Current { get { return current; } }

            public bool MoveNext()
            {
                if (parent.IsValidIndex(currentIndex + 1))
                {
                    current = parent[++currentIndex];
                    return true;
                }
                else
                    return false;
            }

            public void Reset()
            {
                currentIndex = -1;
            }

            public void Dispose() { }
        }
    }
}
